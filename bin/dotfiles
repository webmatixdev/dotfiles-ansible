#!/bin/bash

# color codes
RESTORE='\033[0m'
NC='\033[0m'
BLACK='\033[00;30m'
RED='\033[00;31m'
GREEN='\033[00;32m'
YELLOW='\033[00;33m'
BLUE='\033[00;34m'
PURPLE='\033[00;35m'
CYAN='\033[00;36m'
SEA="\\033[38;5;49m"
LIGHTGRAY='\033[00;37m'
LBLACK='\033[01;30m'
LRED='\033[01;31m'
LGREEN='\033[01;32m'
LYELLOW='\033[01;33m'
LBLUE='\033[01;34m'
LPURPLE='\033[01;35m'
LCYAN='\033[01;36m'
WHITE='\033[01;37m'
OVERWRITE='\e[1A\e[K'

#emoji codes
CHECK_MARK="${GREEN}\xE2\x9C\x94${NC}"
X_MARK="${RED}\xE2\x9C\x96${NC}"
PIN="${RED}\xF0\x9F\x93\x8C${NC}"
CLOCK="${GREEN}\xE2\x8C\x9B${NC}"
ARROW="${SEA}\xE2\x96\xB6${NC}"
BOOK="${RED}\xF0\x9F\x93\x8B${NC}"
HOT="${ORANGE}\xF0\x9F\x94\xA5${NC}"
WARNING="${RED}\xF0\x9F\x9A\xA8${NC}"
RIGHT_ANGLE="${GREEN}\xE2\x88\x9F${NC}"



set -e

# Paths
ID=""
DOTFILES_LOG="$HOME/.dotfiles.log"
DOTFILES_DIR="$HOME/.dotfiles"
SSH_DIR="$HOME/.ssh"
IS_FIRST_RUN="$HOME/.dotfiles_run"
SKIP_FIDO=false

# _header colorize the given argument with spacing
function __task {
  # if _task is called while a task was set, complete the previous
  if [[ $TASK != "" ]]; then
    printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"
  fi
  # set new task title and print
  TASK=$1
  printf "${LBLACK} [ ]  ${TASK} \n${LRED}"
}

# _cmd performs commands with error checking
function _cmd {
  #create log if it doesn't exist
  if ! [[ -f $DOTFILES_LOG ]]; then
    touch $DOTFILES_LOG
  fi
  # empty conduro.log
  # > $DOTFILES_LOG
  # hide stdout, on error we print and exit
  if eval "$1" 1> /dev/null 2> $DOTFILES_LOG; then
    return 0 # success
  fi
  # read error from log and add spacing
  printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}\n"
  while read -r line; do
    printf "      ${line}\n"
  done < $DOTFILES_LOG
  printf "\n"
  # remove log file
  rm $DOTFILES_LOG
  # exit installation
  exit 1
}

function _clear_task {
  TASK=""
}

function _task_done {
  printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"
  _clear_task
}

function setup_fido_ssh_keys {
  # Ensure SSH directory exists
  mkdir -p "$SSH_DIR"
  chmod 700 "$SSH_DIR"

  # Check if any SSH key files already exist
  local fido_key_files=("$SSH_DIR/id_ed25519_sk" "$SSH_DIR/id_ecdsa_sk" "$SSH_DIR/id_ed25519_sk_rk" "$SSH_DIR/id_ecdsa_sk_rk")
  local keys_exist=false

  for key_file in "${fido_key_files[@]}"; do
    if [[ -f "$key_file" ]]; then
      keys_exist=true
      break
    fi
  done

  if [[ "$keys_exist" == false ]]; then
    __task "Setting up FIDO SSH keys"
    echo -e "${ARROW} ${LYELLOW}Please insert your FIDO key and press ENTER to continue${NC}"
    read -n 1 -s -r

    # Run ssh-keygen -K to extract resident keys
    # Don't redirect output as this command is interactive and needs user input
    echo -e "${ARROW} ${LYELLOW}Running ssh-keygen -K, follow the prompts...${NC}"
    if ssh-keygen -K; then
      echo -e "${CHECK_MARK} ${GREEN}FIDO keys extracted successfully${NC}"
      _task_done
    else
      echo -e "${X_MARK} ${RED}Failed to extract FIDO keys${NC}"
    fi
  else
    echo -e "${CHECK_MARK} ${GREEN}FIDO SSH keys already exist${NC}"
  fi
}

function ubuntu_setup() {
  if ! dpkg -s ansible >/dev/null 2>&1; then
    __task "Installing Ansible"
    _cmd "sudo apt-get update"
    _cmd "sudo apt-get install -y software-properties-common"
    _cmd "sudo apt-add-repository -y ppa:ansible/ansible"
    _cmd "sudo apt-get update"
    _cmd "sudo apt-get install -y ansible"
    _cmd "sudo apt-get install python3-argcomplete"
    _cmd "sudo activate-global-python-argcomplete3"
  fi
  if ! dpkg -s python3 >/dev/null 2>&1; then
    __task "Installing Python3"
    _cmd "sudo apt-get install -y python3"
  fi

  local UBUNTU_MAJOR_VERSION=$(echo $VERSION_ID | cut -d. -f1)
  if [ $UBUNTU_MAJOR_VERSION -le 22 ]; then
    if ! dpkg -s python3-pip >/dev/null 2>&1; then
      __task "Installing Python3 Pip"
      _cmd "sudo apt-get install -y python3-pip"
    fi
    if ! pip3 list | grep watchdog >/dev/null 2>&1; then
      __task "Installing Python3 Watchdog"
      _cmd "sudo apt-get install -y python3-watchdog"
    fi
  fi
}

function macos_setup() {
  if ! [ -x "$(command -v brew)" ]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"

    if ! [ -x "$(command -v brew)" ]; then
      __task "Installing Homebrew"
      /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      eval "$(/opt/homebrew/bin/brew shellenv)"
    fi
  fi

  if ! [ -x "$(command -v git)" ]; then
    __task "Installing Git"
    _cmd "brew install git"
  fi

  if ! [ -x "$(command -v ansible)" ]; then
    __task "Installing Ansible"
    _cmd "brew install ansible"
  fi
  if ! [ -x "$(command -v op)" ]; then
    __task "Installing 1Password CLI"
    _cmd "brew install 1password"
    _cmd "brew install 1password-cli"
    __task "Setting up 1Password CLI"
    # press any key to continue
    read -n 1 -s -r -p "Press any key to continue"
    echo -e "${OVERWRITE}${OVERWRITE} [✓]  ${GREEN}1Password CLI setup complete${NC}" && _clear_task
  fi
}

update_ansible_galaxy() {
  local os=$1
  local os_requirements=""
  __task "Updating Ansible Galaxy"
  if [ -f "$DOTFILES_DIR/requirements/$os.yaml" ]; then
    __task "${OVERWRITE}Updating Ansible Galaxy with OS Config: $os"
    os_requirements="$DOTFILES_DIR/requirements/$os.yaml"
  fi
  _cmd "ansible-galaxy install -r $DOTFILES_DIR/requirements/common.yaml $os_requirements"
}

detect_os() {
  if [ -f /etc/os-release ]; then
    source /etc/os-release
    echo $ID
  else
    echo $(uname -s | tr '[:upper:]' '[:lower:]')
  fi
}

prepare_dotfiles_dir() {
  if ! [[ -d "$DOTFILES_DIR" ]]; then
    __task "Cloning repository"
    _cmd "git clone --quiet https://github.com/webmatixdev/dotfiles-ansible.git $DOTFILES_DIR"
  else
    __task "Updating repository"
    _cmd "git -C $DOTFILES_DIR pull --quiet"
  fi

  # Symlink $DOTFILES_DIR/bin/dotfiles to a location in PATH if not already linked
  DOTFILES_BIN="$DOTFILES_DIR/bin/dotfiles"
  LINK_TARGET="/usr/local/bin/dotfiles"

  if [[ ! -L "$LINK_TARGET" || "$(readlink -- "$LINK_TARGET")" != "$DOTFILES_BIN" ]]; then
    __task "Symlinking dotfiles script to $LINK_TARGET"
    _cmd "ln -sf \"$DOTFILES_BIN\" \"$LINK_TARGET\""
    _task_done
  fi
}

dotfiles_os=$(detect_os)
__task "Loading Setup for detected OS: $dotfiles_os"
case $dotfiles_os in
  ubuntu)
    ubuntu_setup
    ;;
  darwin)
    macos_setup
    ;;
  *)
    __task "Unsupported OS"
    _cmd "echo 'Unsupported OS'"
    ;;
esac

# Process command line arguments early
env_value=""
remaining_args=()
for arg in "$@"; do
  if [[ $arg == "--env="* ]]; then
    env_value="${arg#*=}"
  elif [[ $arg == "--no-fido" ]]; then
    SKIP_FIDO=true
  else
    remaining_args+=("$arg")
  fi
done

# Setup FIDO SSH keys early, before any Git interactions
if [ "$SKIP_FIDO" = false ]; then
  setup_fido_ssh_keys
fi

prepare_dotfiles_dir

pushd "$DOTFILES_DIR" 2>&1 > /dev/null
update_ansible_galaxy $ID

# If env is provided, set it first
if [[ -n "$env_value" ]]; then
  __task "Setting environment to: $env_value"
  _cmd "ansible-playbook \"$DOTFILES_DIR/set_env.yaml\" -e \"dotfiles_env=$env_value\""
  _task_done
fi

# Run the main playbook with remaining arguments
# Add --ask-become-pass on first run for sudo privileges
if ! [[ -f "$IS_FIRST_RUN" ]]; then
  echo -e "${ARROW} ${CYAN}First run detected - you'll be asked for your sudo password${NC}"
  ansible-playbook "$DOTFILES_DIR/main.yaml" --ask-become-pass "${remaining_args[@]}"
else
  ansible-playbook "$DOTFILES_DIR/main.yaml" "${remaining_args[@]}"
fi

popd 2>&1 > /dev/null

if ! [[ -f "$IS_FIRST_RUN" ]]; then
  echo -e "${CHECK_MARK} ${GREEN}First run complete!${NC}"
  echo -e "${ARROW} ${CYAN}Please reboot your computer to complete the setup.${NC}"
  touch "$IS_FIRST_RUN"
fi

# vi:ft=sh:
